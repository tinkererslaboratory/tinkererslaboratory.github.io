<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xml" href="/feed.xslt.xml"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.2.1">Jekyll</generator><link href="https://grubdragon.github.io/erciitb/feed.xml" rel="self" type="application/atom+xml" /><link href="https://grubdragon.github.io/erciitb/" rel="alternate" type="text/html" /><updated>2017-08-10T05:22:25+00:00</updated><id>https://grubdragon.github.io/erciitb/</id><title type="html">Electronics and Robotics Club, IIT Bombay</title><subtitle>A place for tinkerers and the sort!</subtitle><entry><title type="html">Get Electrified 3</title><link href="https://grubdragon.github.io/erciitb/blog/informative/get-electrified-3/" rel="alternate" type="text/html" title="Get Electrified 3" /><published>2017-04-24T00:00:00+00:00</published><updated>2017-04-24T00:00:00+00:00</updated><id>https://grubdragon.github.io/erciitb/blog/informative/get-electrified-3</id><content type="html" xml:base="https://grubdragon.github.io/erciitb/blog/informative/get-electrified-3/">&lt;p&gt;Electronics club conducted its last electrified session on 18th March, 2017. It was totally awesome as we got an opportunity to make a half adder, full adder, subtractor and priority encoder. Along with that we also learnt some cool stuff about digital circuits.&lt;/p&gt;

&lt;p&gt;##Where do we begin from to make anything as simple as an adder?&lt;/p&gt;

&lt;p&gt;We basically use a combinational circuit. Not only an adder but we can even make a subtractor, priority encoder, MUX and what not!&lt;/p&gt;

&lt;p&gt;Combinational circuit is basically used for making those circuits which depends on the current state.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://grubdragon.github.io/erciitb/assets/blog/get-electrified-3/image_0.png&quot; alt=&quot;Combinational Logic Circuits&quot; /&gt;&lt;/p&gt;

&lt;p&gt;##So, let us now begin with how exactly do these combinational circuits function:&lt;/p&gt;

&lt;h2 id=&quot;adder&quot;&gt;Adder:&lt;/h2&gt;

&lt;p&gt;As you can guess an adder simply add two numbers. But why do we need a complicated circuit to just add numbers? Actually, adders are used in the arithmetic logic units in many computers and other kinds of processors.&lt;/p&gt;

&lt;p&gt;There are two kinds of adders:&lt;/p&gt;

&lt;h3 id=&quot;half-adder&quot;&gt;1) Half adder&lt;/h3&gt;

&lt;h3 id=&quot;full-adder&quot;&gt;2) Full adder&lt;/h3&gt;

&lt;p&gt;The major difference between a half adder and a full adder is that a full-adder has three inputs and two outputs where as a half adder has only two inputs and two outputs. In a full adder, the first two inputs are A and B and the third input is an input carry.&lt;/p&gt;

&lt;p&gt;The circuit diagram and truth table of a half adder and full adder is shown below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://grubdragon.github.io/erciitb/assets/blog/get-electrified-3/image_1.png&quot; alt=&quot;Half Adder&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://grubdragon.github.io/erciitb/assets/blog/get-electrified-3/image_2.png&quot; alt=&quot;Full Adder&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;subtractor&quot;&gt;Subtractor:&lt;/h2&gt;

&lt;p&gt;Similarly, a subtractor subtracts two numbers. They are also of two types and as you can guess the two types are:&lt;/p&gt;

&lt;h3 id=&quot;half-subtractor&quot;&gt;1) Half subtractor&lt;/h3&gt;

&lt;h3 id=&quot;full-subtractor&quot;&gt;2) Full subtractor&lt;/h3&gt;

&lt;p&gt;Just like in an adder, the subtractor has similar inputs just the difference is that instead of a carry we have a “borrow”.&lt;/p&gt;

&lt;p&gt;The circuit diagram and truth table of a half subtractor and full subtractor is shown below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://grubdragon.github.io/erciitb/assets/blog/get-electrified-3/image_3.png&quot; alt=&quot;Half Subtractor&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://grubdragon.github.io/erciitb/assets/blog/get-electrified-3/image_4.png&quot; alt=&quot;Full Subtractor&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;priority-encoder&quot;&gt;Priority Encoder:&lt;/h2&gt;

&lt;p&gt;So basically, what a priority encoder do is that it gives the highest priority of the current input as an output. So, when an input with a higher priority is present, all other inputs with a lower priority will be ignored. The priority encoder comes in many different forms with an example of an 8-input priority encoder along with its truth table shown below.&lt;/p&gt;

&lt;h2 id=&quot;to-3-bit-priority-encoder&quot;&gt;8-to-3 Bit Priority Encoder:&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://grubdragon.github.io/erciitb/assets/blog/get-electrified-3/image_5.png&quot; alt=&quot;8 to 3 bit Priority Encoder&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Where X equals “don’t care”, that is it can be either logic “0” or logic “1”.&lt;/p&gt;

&lt;h2 id=&quot;multiplexer-mux-and-demultiplexer&quot;&gt;Multiplexer (MUX) and Demultiplexer:&lt;/h2&gt;

&lt;h2 id=&quot;how-are-multiple-signals-combined&quot;&gt;How are multiple signals combined?&lt;/h2&gt;

&lt;p&gt;MUX is used for this purpose. It has N Select lines, 2N input lines, and it routes one of the input lines to the output. Conceptually, a MUX may be thought of as 2N switches. For a given combination of the select inputs, only one of the switches closes (makes contact), and the others are open.&lt;/p&gt;

&lt;p&gt;It is obvious from the name that a demultiplexer do the reverse of what a multiplexer do. It takes a single input (I) and routes it to one of the output lines. For N Select inputs, the number of output lines is 2^N.&lt;/p&gt;

&lt;p&gt;Circuit diagram and truth table of a multiplexer is shown below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://grubdragon.github.io/erciitb/assets/blog/get-electrified-3/image_6.png&quot; alt=&quot;4:1 Multiplexer&quot; /&gt;  &lt;img src=&quot;https://grubdragon.github.io/erciitb/assets/blog/get-electrified-3/image_7.png&quot; alt=&quot;Truth Table&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Circuit diagram and truth table of a demultiplexer is shown below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://grubdragon.github.io/erciitb/assets/blog/get-electrified-3/image_8.png&quot; alt=&quot;1:4 Demultiplexer&quot; /&gt;  &lt;img src=&quot;https://grubdragon.github.io/erciitb/assets/blog/get-electrified-3/image_9.png&quot; alt=&quot;Truth Table&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;encoders-and-decoders&quot;&gt;Encoders and Decoders:&lt;/h2&gt;

&lt;p&gt;You might be wondering what is the need of an encoder?&lt;/p&gt;

&lt;p&gt;It is actually used to convert information from one format to another for the purpose of standardization, speed and compressions.&lt;/p&gt;

&lt;p&gt;In encoders, only one input line is assumed to be active. The binary number corresponding to the active input line appears at the output pins. The N output lines can represent 2N binary numbers, each corresponding to one of the M input lines, i.e., we can have M = 2N. Some encoders have M &amp;lt; 2 N.&lt;/p&gt;

&lt;p&gt;Similarly, you can guess the functioning of a decoder. For each input combination, only one output line is active (which means 0 or 1, depending on whether the outputs are active low or active high). Since there are 2N input combinations, there could be 2N output lines, i.e., M = 2N. However, there are decoders with M &amp;lt; 2 N as well.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://grubdragon.github.io/erciitb/assets/blog/get-electrified-3/image_10.png&quot; alt=&quot;Encoder&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://grubdragon.github.io/erciitb/assets/blog/get-electrified-3/image_11.png&quot; alt=&quot;Decoder&quot; /&gt;&lt;/p&gt;</content><author><name>Mayanka Medhe</name></author><category term="[&quot;Informative&quot;]" /><category term="Digital Electronics" /><category term="Adder" /><category term="MUX" /><summary type="html">Tinkering with Digital Electronics!</summary></entry><entry><title type="html">Experiences with Robotic Arm</title><link href="https://grubdragon.github.io/erciitb/blog/robotic_arm/" rel="alternate" type="text/html" title="Experiences with Robotic Arm" /><published>2016-12-20T00:00:00+00:00</published><updated>2016-12-20T00:00:00+00:00</updated><id>https://grubdragon.github.io/erciitb/blog/robotic_arm</id><content type="html" xml:base="https://grubdragon.github.io/erciitb/blog/robotic_arm/">&lt;p&gt;We organised a session on Grippers where enthusiastic freshers participated in an overnight hackathon which was preceded by Tutorial for the same in Tinkerers Laboratory,IIT Bombay.  
Here is a blog post by one such team which participated in the event and successfully completed the Gripper.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;center-team-hifi&quot;&gt;&lt;center&gt; Team HIFI&lt;/center&gt;&lt;/h1&gt;
&lt;center&gt; - Maitrey Gramopadhye, Swadha Sanghvi, Bhuyashi Deka, Vikrant Nagpure

&lt;img src=&quot;https://grubdragon.github.io/erciitb/assets/blog/Gripper/roboarm.jpg&quot; alt=&quot;team&quot; /&gt;

&lt;p&gt;
All at least once we've tried opening up clocks in our house or the batteries of our mobile. Well, to satisfy this techie spirit a gripper bot session was held on 23 November. we had been waiting to get our Xlr8 bots out of our cupboards and and do more with them as our mentors had promised we would. The tech nightout held in tinker's lab started at 9 pm. Mentors were very enthusiastic about explaining the concept of grippers and having attended the get mechanised and get electrified session it wasn't hard to get started.
&lt;/p&gt;
&lt;p&gt;
We first set to the planning of the steps to take. After half an hour of debating we decided on making the gripper attached with gears which were rotated by a worm gear, and to attach this gripper mechanism on a ramp, which could move the gripper up and down, which would be on our xlr8 bots. the movement of the gripper, ramp and the bot itself was to be controlled by giving commands from a laptop to an arduino.
&lt;/p&gt;
&lt;p&gt;
Starting the work on the gripper we first thought of attaching a 10 rpm motor to the worm gear, but that gave us an angular velocity of 1 rotation per 2.4 minutes with the gripper. so we switched to a 150 rpm motor. Next we had to decide the shape of the gripper arm setup and attach it to the spur gears.
&lt;/p&gt;
&lt;p&gt;
Based on a youtube video we chose to have 4 wooden planks in each arm with a setup such that the forward most arm is always pointing in the forward direction. Then to attach the arms to gears we drilled holes in the arms and fitted them to the gears with 5 mm screws, which stayed together by friction.    
&lt;/p&gt;
&lt;p&gt;
To fix the worm gear on the motor was a major task, as we had to use a pointed screw to avoid the relative motion of the shaft of motor with gear, but even after that the gear didn't rotate along an axis parallel to the shaft. due to this the spur gears experienced an upward force and bounced out of the screws of which they were attached. we relied once again on friction to resolve this issue and thickened the screws by covering them with tape.    
&lt;/p&gt;
&lt;p&gt;
Now having almost completed the gripper we set to work on the ramp. It's called a ramp here because it moved like one. We fitted a rack on it's lower side and a 10 rpm on surface of the bot to move the ramp.In this way the ramp moved forward when it moved up and back when it moved down. To keep it guided along a straight path we attached two small rods on either side of the ramp to support its motion.    
&lt;/p&gt;
&lt;p&gt;
After finishing the mechanical aspect of the project it was time to bring the gripper to life and attach the arduino. Choosing to stick as close to the Xlr8 setup as possible we kept the circuit for motion of the bot intact and built another like it for the ramp and the gripper. here the motors were attached to L293D and it to the arduino via an 7806.    
&lt;/p&gt;
&lt;p&gt;
In the code of the arduino were 8 commands, forward, back, right and left to control the bot, up and down to control the ramp and open and close to control the gripper. the working principle was simply pin high and pin low, of the motors.     
&lt;/p&gt;
&lt;p&gt;
Our next move would now be to sort out the few things still out of shape. We have thought of trying to attach the worm gear to the motor by glue as then it might align parallel to it. Also by installing a bluetooth module in the circuit the bot will no longer be needed to be wired.    
&lt;/p&gt;
&lt;p&gt;
Overall, spending 4 days and 5 nights in TL, putting the post Endsem lukkha to tech were worth it. the best part was seeing the bot actually work.    
&lt;/p&gt;
&lt;p&gt;
We would like to thank our mentors and technicians of TL for helping us through it.    
&lt;/p&gt;
Cheers!
&lt;/center&gt;</content><author><name>Maitrey Gramopadhye, Swadha Sanghvi, Bhuyashi Deka, Vikrant Nagpure</name></author><category term="blog" /><category term="Gripper" /><category term="Automation" /><category term="Arduino" /><summary type="html">We organised a session on Grippers where enthusiastic freshers participated in an overnight hackathon which was preceded by Tutorial for the same in Tinkerers Laboratory,IIT Bombay.  
Here is a blog post by one such team which participated in the event and successfully completed the Gripper.</summary></entry><entry><title type="html">Improving ADCs by intentionally adding noise</title><link href="https://grubdragon.github.io/erciitb/blog/informative/improving-adcs-with-noise/" rel="alternate" type="text/html" title="Improving ADCs by intentionally adding noise" /><published>2016-10-29T00:00:00+00:00</published><updated>2016-10-29T00:00:00+00:00</updated><id>https://grubdragon.github.io/erciitb/blog/informative/improving-adcs-with-noise</id><content type="html" xml:base="https://grubdragon.github.io/erciitb/blog/informative/improving-adcs-with-noise/">&lt;p&gt;Everybody has this presumed notion that noise in an electronic system is bad.
We all learn about ways to reduce noise in the circuits we implement to get
better results. In this post we will see a case where intentionally &lt;em&gt;adding&lt;/em&gt;
noise to a system will give better results.&lt;/p&gt;

&lt;h2 id=&quot;what-is-wrong-with-a-normal-adc&quot;&gt;What is wrong with a normal ADC?&lt;/h2&gt;

&lt;p&gt;The purpose of an Analog to Digital converter is to obtain a digital value of
an analog signal. Lets say we want to convert a signal which is between -1 to 1V.
The analog version of this signal will be a real number and so can take one
of infinitely many real values between -1 and 1. But the digital representation
will only be able to take finite number of values because we only have a finite
number of bits to encode the real number.&lt;/p&gt;

&lt;p&gt;We will have to &lt;em&gt;quantize&lt;/em&gt; the signal i.e. pick the closest possible
approximation of it from the set of possible values. For the sake of simplicity,
lets assume we have just 1 bit to encode the signal. So the set of values our 
digital signal can take is &lt;script type=&quot;math/tex&quot;&gt;\{0, 1\}&lt;/script&gt;. Now it is clear that depending on the
analog value we will have to &lt;em&gt;pick&lt;/em&gt; one of 0 or 1 to represent this value as
our digital signal. The analog signal will almost never equal to -1 or 1
(try calculating the probability) so we will always get an error when we
try to &lt;em&gt;quantize&lt;/em&gt; our signal. This error is called &lt;strong&gt;Quantization Error&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;there-is-already-an-error-and-you-want-to-add-more-noise&quot;&gt;There is already an error and you want to add more noise?!&lt;/h2&gt;

&lt;p&gt;We will eventually see that intentionally adding noise will help &lt;em&gt;reduce&lt;/em&gt;
quantization error. This kind of intentionally added noise is so commonly used
that it has its own name: Dither. Dither, apart from being used in ADCs is
very widely used in image processing to display better quality images.
See an example from &lt;a href=&quot;https://en.wikipedia.org/wiki/Dither&quot;&gt;the wikipedia page&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;//upload.wikimedia.org/wikipedia/commons/5/57/1_bit.png&quot; alt=&quot;dithered leaf&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The image of this leaf has been represented using just the colour white(1) and
black(0)! And yet it looks like it has various shades of grey! Lets see how
this happens.&lt;/p&gt;

&lt;h2 id=&quot;dither-in-adcs&quot;&gt;Dither in ADCs&lt;/h2&gt;

&lt;p&gt;Continuing with the quantization example above, lets say we have a 1-bit ADC
which gives output 0 if the input signal is negative and 1 if positive.
If &lt;script type=&quot;math/tex&quot;&gt;X&lt;/script&gt; is the digital output and &lt;script type=&quot;math/tex&quot;&gt;c&lt;/script&gt; is the analog input (assumed constant),&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
X = 
\begin{cases} 
\hfill 0 \hfill &amp; \text{ if $c \leq 0$} \\
\hfill 1 \hfill &amp; \text{ if $c &gt; 0$} \\
\end{cases}
, c \in [-1,1] %]]&gt;&lt;/script&gt;

&lt;p&gt;If we add a dither &lt;script type=&quot;math/tex&quot;&gt;d(t)&lt;/script&gt; to the analog input, the value of &lt;script type=&quot;math/tex&quot;&gt;X&lt;/script&gt; will be
decided by &lt;script type=&quot;math/tex&quot;&gt;c+d(t)&lt;/script&gt;. Lets say we add a dither which is characterised by a 
&lt;a href=&quot;https://en.wikipedia.org/wiki/Uniform_distribution_(continuous)&quot;&gt;uniform random variable&lt;/a&gt;, so&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;d \sim \text{U}(-\frac{1}{2},\frac{1}{2})&lt;/script&gt;

&lt;p&gt;we will later see the significance of the range &lt;script type=&quot;math/tex&quot;&gt;-\frac{1}{2},\frac{1}{2}&lt;/script&gt;.
Cumulative density function of &lt;script type=&quot;math/tex&quot;&gt;d&lt;/script&gt; will be&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;F_d(x) = x + \frac{1}{2}, x \in [-\frac{1}{2},\frac{1}{2}]&lt;/script&gt;

&lt;p&gt;&lt;script type=&quot;math/tex&quot;&gt;X&lt;/script&gt; is dependent on a random variable, hence &lt;script type=&quot;math/tex&quot;&gt;X&lt;/script&gt; will also become a random
variable. And because &lt;script type=&quot;math/tex&quot;&gt;X \in \{0,1\}&lt;/script&gt; it will be a &lt;a href=&quot;https://en.wikipedia.org/wiki/Bernoulli_distribution&quot;&gt;Bernoulli random variable&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hence,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;X \sim \text{Ber}(p)&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{split}
P(X = 1) &amp; = P(c+d(t) &gt; 0) = p \\
 &amp; = P(d(t) &gt; -c) \\
 &amp; = 1 - P(d(t) \leq -c) \\
 &amp; = 1 - F_d(-c) \\
 &amp; = F_d(c) \\
 &amp; = c + \frac{1}{2}
\end{split} %]]&gt;&lt;/script&gt;

&lt;p&gt;We get &lt;script type=&quot;math/tex&quot;&gt;X&lt;/script&gt; to be a be a bernoulli variable with parameter dependent on our analog
value!&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;X \sim \text{Ber}(c+\frac{1}{2})&lt;/script&gt;

&lt;p&gt;We can see that expected value of &lt;script type=&quot;math/tex&quot;&gt;X&lt;/script&gt; is equal to &lt;script type=&quot;math/tex&quot;&gt;c + \frac{1}{2}&lt;/script&gt; (because X is bernoulli).
By the law of large numbers, we can say that if we take large number of samples of
&lt;script type=&quot;math/tex&quot;&gt;X&lt;/script&gt; (keeping &lt;script type=&quot;math/tex&quot;&gt;c&lt;/script&gt; constant), the average value of these samples will converge
to the expected value &lt;script type=&quot;math/tex&quot;&gt;c + \frac{1}{2}&lt;/script&gt;&lt;/p&gt;

&lt;h2 id=&quot;block-diagram-for-adding-dither&quot;&gt;Block diagram for adding dither&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://grubdragon.github.io/erciitb/assets/blog/improving-adcs-with-noise/block_diag.png&quot; alt=&quot;block diagram&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The Sampler just reads the value of its input at &lt;script type=&quot;math/tex&quot;&gt;t = nT&lt;/script&gt;, hence it gives
a sample at every &lt;script type=&quot;math/tex&quot;&gt;T&lt;/script&gt; seconds. From our previous derivation we can say that&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\lim_{n\to\infty} \frac{1}{n}\sum_{n=0}^1 X[n] = c + \frac{1}{2}&lt;/script&gt;

&lt;p&gt;The problem here is that taking an infinite number of samples will take infinite
time which is impractical. But we can say that the larger number of samples we
the better accuracy in value of &lt;script type=&quot;math/tex&quot;&gt;c&lt;/script&gt; we will get. 
If we take &lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt; samples, we can see that the average of &lt;script type=&quot;math/tex&quot;&gt;X[n]&lt;/script&gt; will take one
of &lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt; values from the set &lt;script type=&quot;math/tex&quot;&gt;\{0,\frac{1}{n},\frac{2}{n},...,\frac{n}{n}\}&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;We thus have quantized &lt;script type=&quot;math/tex&quot;&gt;c&lt;/script&gt; to &lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt; distinct values or &lt;script type=&quot;math/tex&quot;&gt;\text{log}_2(n)&lt;/script&gt; bits
using a 1-bit ADC!&lt;/p&gt;

&lt;h2 id=&quot;dither-in-images&quot;&gt;Dither in images&lt;/h2&gt;

&lt;p&gt;Lets take a look at the leaf image once again. Observe that a greyscale image has
been approximated here using two distinct values (black and white) i.e. a 1-bit value.
Such an image is called a binary image.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;//upload.wikimedia.org/wikipedia/commons/5/57/1_bit.png&quot; alt=&quot;dithered leaf&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Lets say the greyscale had values for every pixel as a real number
between 0 and 1, 0 corresponding to full black and 1 corresponding to full white.
There would be regions in this image with similar values of grey. For e.g.
take the section of the top of the leaf. It is a region of light grey (value&lt;script type=&quot;math/tex&quot;&gt;=c&gt;\frac{1}{2}&lt;/script&gt;).
If we convert this region directly to binary, the whole region will become white.
Similarly we would get a large patches of black and white all over the image 
which would be a pretty inaccurate depiction of the greyscale image.&lt;/p&gt;

&lt;p&gt;Now if we add dither to that small region of similar greyscale value 
and then convert to binary image, the probability of getting a white pixel
will be proportional to the value of that region (&lt;script type=&quot;math/tex&quot;&gt;=c&lt;/script&gt;). If the region has 100
pixels, instead of all 100 being converted to white pixels, &lt;script type=&quot;math/tex&quot;&gt;100c&lt;/script&gt; pixels will be
white and &lt;script type=&quot;math/tex&quot;&gt;100(1-c)&lt;/script&gt; will be black. On average that will look like the region is
grey with value &lt;script type=&quot;math/tex&quot;&gt;c&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;We can say that the average value of a small region in the binary image will be 
close to the greyscale value of that small region in the real image.
Hence we can see that dither gives us a better approximation after quantization.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: The leaf image is using a slightly better algorithm than just adding dither
and converting to binary (Random dithering). Such an image would look much worse, so for representative
purposes I have used this image. You can read more about better algorithms on the
wikipedia page of Dither&lt;/em&gt;&lt;/p&gt;</content><author><name>Meet Udeshi</name></author><category term="[&quot;Informative&quot;]" /><category term="ADC" /><category term="Dither" /><summary type="html">How noise addition helps in increasing accuracy of Analog to Digital conversion</summary></entry><entry><title type="html">Get Electrified 2</title><link href="https://grubdragon.github.io/erciitb/blog/projects/get-electrified-2/" rel="alternate" type="text/html" title="Get Electrified 2" /><published>2016-09-29T00:00:00+00:00</published><updated>2016-09-29T00:00:00+00:00</updated><id>https://grubdragon.github.io/erciitb/blog/projects/get-electrified-2</id><content type="html" xml:base="https://grubdragon.github.io/erciitb/blog/projects/get-electrified-2/">&lt;p&gt;Greetings from Electronics Club IIT Bombay&lt;/p&gt;

&lt;p&gt;We conduct Electrified sessions regularly wherein some basic electronics
concepts are discussed and some cool DIY projects based on the concepts
discussed are made.&lt;/p&gt;

&lt;p&gt;On 23rd september, 2016 we conducted Electrified 2 where we discussed
Operational amplifiers, transistors, sensors, and some awesome circuits
using these devices.&lt;/p&gt;

&lt;p&gt;An overview of the content we covered.&lt;/p&gt;

&lt;h3 id=&quot;operational-amplifiers&quot;&gt;Operational Amplifiers&lt;/h3&gt;

&lt;p&gt;Op-amp, as often called, is an extremely versatile devices which is fundamentally a
voltage amplifying device. Using opamps we can amplify, filter and do a
lot more with signals. Also in addition to that we can perform
mathematical operations such as addition, subtraction , integration and
differentiation etc.&lt;/p&gt;

&lt;p&gt;For more details of Opamps you can refer our
&lt;a href=&quot;https://grubdragon.github.io/erciitb/tutorials/basic_electronics/&quot;&gt;&lt;em&gt;tutorial&lt;/em&gt;&lt;/a&gt;
on basic electronics.&lt;/p&gt;

&lt;h3 id=&quot;bipolar-junction-transistors&quot;&gt;Bipolar Junction Transistors&lt;/h3&gt;

&lt;p&gt;Transistors are three terminal active devices made from different
semiconductor materials that can act as either an insulator or a
conductor by the application of a small signal voltage. The transistor’s
ability to change between these two states enables it to have two basic
functions: “switching” (digital electronics) or “amplification” (analog
electronics).&lt;/p&gt;

&lt;p&gt;Enough of boring theory I guess, let’s get started with the circuits.&lt;/p&gt;

&lt;h2 id=&quot;projects&quot;&gt;Projects&lt;/h2&gt;

&lt;h3 id=&quot;xyloband&quot;&gt;Xyloband&lt;/h3&gt;

&lt;p&gt;Have you ever seen the xylobands which we wear in concerts and they
flash light according to the music being played. You can make it on your
own with just basic knowledge of opamps !&lt;/p&gt;

&lt;p&gt;Formally the problem statement would be make an LED blink on the beats
of music.&lt;/p&gt;

&lt;p&gt;Now the beats of music are essentially the drum sounds which are of the
lowest frequency. So essentially we need to isolate the sound signals
produced made by a drum, amplify them and then make LED toggle on that
frequency.&lt;/p&gt;

&lt;p&gt;Here is the circuit of xyloband:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://grubdragon.github.io/erciitb/assets/blog/get-electrified-2/xylo_band_circuit.jpg&quot; alt=&quot;xyloband_circuit&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We start by taking the input of music via a microphone. We can model the
microphone as unipolar resistor. Therefore we have made a voltage
divider circuit in which one resistor is the microphone itself. When the
sound waves hit the microphone, the resistance of the microphone changes
according to the music.&lt;/p&gt;

&lt;p&gt;So theoretically we have a voltage output of music but you can’t
directly apply this output to the LED. The reasons being :&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The voltage output is in order of about 10-20 millivolts.&lt;/li&gt;
  &lt;li&gt;The output contains all the frequencies.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To amplify the signal we are using opamps.The next part of the circuit
you can see is an inverting voltage amplifier made by using an Opamp.
The gain factor of this amplifier is simply the ratio of resistances
connected which is 100/1.5 = 66.67.&lt;/p&gt;

&lt;p&gt;Now we need only the signals corresponding to the drum frequencies. But
we have all frequencies corresponding to all the instruments. We need to
“filter” out these frequencies. Since the frequency we want is the
lowest of all we need to design a low pass filter.&lt;/p&gt;

&lt;p&gt;Here too opamp comes to help. As you can see in the circuit we have
designed a low pass filter using opamp. The values of resistor and
capacitor is chosen such that the cutoff frequency of the filter is just
above the maximum frequency of drum beats.&lt;/p&gt;

&lt;p&gt;Now after filtering the signal this is what we have in our hands : An
amplified output corresponding the the beats of the music. Note that
after filtering the higher frequencies have been attenuated.&lt;/p&gt;

&lt;p&gt;Now what I want is that if I get the amplified output of drumbeats the
my LED should turn ON and if get the attenuated voltage of higher
frequencies then my LED should be OFF.&lt;/p&gt;

&lt;p&gt;So basically we need to “compare” the signals with respect to a particular value.
So that’s what our next part of the circuit is; a comparator. The
reference voltage of comparator has been set by using a simple voltage
divider.&lt;/p&gt;

&lt;p&gt;And we are done with our circuit and you are ready to make the LED dance
on your music beats.&lt;/p&gt;

&lt;h3 id=&quot;audio-amplifier&quot;&gt;Audio Amplifier&lt;/h3&gt;

&lt;p&gt;In this circuit we play music through our cell phones via an external
speaker.&lt;/p&gt;

&lt;p&gt;Here is the circuit diagram of the Audio Amplifier:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://grubdragon.github.io/erciitb/assets/blog/get-electrified-2/audio_amplifier_circuit.jpg&quot; alt=&quot;audio_amplifier_circuit&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Can you see an AC source in the left part of circuit ? That’s where we
connect the audio jack output from our cell phones.&lt;/p&gt;

&lt;p&gt;Now to drive a speaker we need sufficient voltage and current. The
current and voltage that we receive from the audio jack is not
sufficient to drive the speaker. Therefore in the above circuit we are
amplifying the signal in two stages; one is voltage amplifier and the
another one is current amplifier.&lt;/p&gt;

&lt;p&gt;The voltage amplification is done by opamp. The current is amplified
using a differential amplifier made by an npn and a pnp transistor. The
final output is then connected to the speaker and you have the speaker
playing the music.&lt;/p&gt;

&lt;p&gt;Let’s have a look at how the things turned out to be :)&lt;/p&gt;

&lt;iframe width=&quot;1280&quot; height=&quot;720&quot; src=&quot;https://www.youtube.com/embed/So6K92vzHUw&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;</content><author><name>Pranav Sankhe</name></author><category term="[&quot;Projects&quot;]" /><category term="Analog Electronics" /><category term="Xyloband" /><category term="Audio Amplifier" /><summary type="html">How we designed and made xylobands and audio amplifiers!</summary></entry><entry><title type="html">The Tech Behind Games</title><link href="https://grubdragon.github.io/erciitb/blog/informative/the-tech-behind-games/" rel="alternate" type="text/html" title="The Tech Behind Games" /><published>2016-08-31T00:00:00+00:00</published><updated>2016-08-31T00:00:00+00:00</updated><id>https://grubdragon.github.io/erciitb/blog/informative/the-tech-behind-games</id><content type="html" xml:base="https://grubdragon.github.io/erciitb/blog/informative/the-tech-behind-games/">&lt;p&gt;Gaming is one of the most popular form of entertainment (and probably will hold this position forever).
Also, mobile gaming is on a boom now a days. Almost every good game needs its controls to be intuitive and flexible. 
There has been a lot of research and upgradations in the field of motion sensing.
Some of the major breakthroughs are Gyroscope, Accelerometer, Magnetometer, etc. Let’s know about these in detail.&lt;/p&gt;

&lt;h3 id=&quot;motion-sensing&quot;&gt;Motion Sensing&lt;/h3&gt;

&lt;p&gt;One key element of interaction is local motion of the phone, such as linear acceleration, rotational velocity, etc.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://grubdragon.github.io/erciitb/assets/blog/the-tech-behind-games/accel_gyro.jpg&quot; alt=&quot;accel_gyro&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Accelerometer&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;Have you ever wondered how your phone manages to know what direction you are holding it?
It uses a device called accelerometer. An accelerometer is a device that measures linear acceleration.
As it has to measure acceleration, force should come in picture somewhere.
It measures force using a loaded capacitor with one plate attached to a spring.
A simplistic model is where one plate is fixed, and the other has the mass of the load attached to a spring.
This spring will change its amount of compression (and hence distance between plates) based on the force
applied to the capacitor. This change in distance leads to a change in capacitance
, which is measured and used to determine the acceleration of the device. Interesting isn’t it!
One capacitor is used for each axis X, Y, Z and hence we can get the acceleration
vector in 3D.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://grubdragon.github.io/erciitb/assets/blog/the-tech-behind-games/capacitor_diagram.jpg&quot; alt=&quot;capacitor&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Gyroscope&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;It is a device used to measure the angular velocity.
It basically consists a wheel or disc mounted so that it can spin rapidly
about an axis which itself is free to alter in any direction.
Also it is connected to different capacitors at its edges such that when the
device rotates and the disc moves there is a subtle change in the capacitance
(similar model like the accelerometer) which helps us to determine the
magnitude of the angular acceleration of the device.
Also, more than one capacitors are used so that we get an idea of the
direction in which the device is rotated.
One important observation here is that setup based on torsion strain cannot
be used as we have to measure angular velocity and not the angular acceleration.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Magnetometer&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;In the very basic sense a magnetormeter is a compass. 
It provides mobile phones with a orientation in relation to the Earth’s magnetic field.
There are two types of magnetometers, which use Hall-effect and others which
use Magneto-resistive effects, the former are used on a large scale.
In these kinds of magnetometers, a conductive plate is connected to a
complete circuit so that electrons flow through it is continuous.
When the device comes in the influence of a magnetic field, there is a deflection
in the path of the electrons due to which a potential difference is created
across the edges of the plate perpendicular to the flow of current.
By measuring this potential difference the magnetic field vector around is determined.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;gps-global-positioning-system&quot;&gt;GPS (Global Positioning System)&lt;/h3&gt;

&lt;p&gt;The United States began the GPS project in 1973 to overcome the limitations of
previous navigation systems. Later they thought that everyone should use this technology.
The purpose was providing geographical position in all weather conditions anywhere on or near Earth.&lt;/p&gt;

&lt;h4 id=&quot;working&quot;&gt;Working&lt;/h4&gt;

&lt;p&gt;This comprises of a network of 27 satellites (of which 3 are for backup)
which have a transmitter attached (they do not have a receiver).
They basically transmit data in the form of electromagnetic waves.
The transmitted data consists of three chunks:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A pre-determined random string&lt;/li&gt;
  &lt;li&gt;The satellite’s current orbital position and time of transmission&lt;/li&gt;
  &lt;li&gt;health data for monitoring&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The receiver also records when it recieved this transmission.
Thus we know the time of transmitting and using this info we can calculate the
distance between us and the satellite as we also know the time we received the wave,
and hence time it took to travel the distance. The speed of the wave is equal
to the speed of light because it is an electromagnetic wave.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://grubdragon.github.io/erciitb/assets/blog/the-tech-behind-games/gps.jpg&quot; alt=&quot;gps&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Using this distance measurement from 3 different satellites and their orbital position
we get three spheres as loci of our position. The earth is the fourth sphere. Using coordinate geometry
we can find the intersection of these spheres to give one single point in 3D space
which will be our location.&lt;/p&gt;

&lt;p&gt;So 3 satellites are enough to pinpoint our location, but to increase the accuracy 4-5 satellites are generally used.&lt;/p&gt;

&lt;h3 id=&quot;augmented-reality&quot;&gt;Augmented Reality&lt;/h3&gt;

&lt;p&gt;As the name suggests it basically enhances the real world by adding the digital
graphics to real world. This is done by displaying the real world and additional
“augmented” data together on one screen.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://grubdragon.github.io/erciitb/assets/blog/the-tech-behind-games/ar.jpg&quot; alt=&quot;AR&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This has varied applications like visual art, greeting cards, video games
(any fans of Pokemon Go or Ingress here!)&lt;/p&gt;

&lt;p&gt;In this, we basically take an image, detect a pattern and attach an object to it.
Let me explain by giving an example, while playing pokemon go suppose a wild magikarp appears,
the camera will take input of the image in front of it and detect any water body
(the shades of colour which represent water are detected) present.
It will then deploy the water type pokemon over that water body.
There other components like angle, height, width, etc. are also considered to give 3D effects.&lt;/p&gt;

&lt;p&gt;Any game like Pokemon Go or Ingress will interface these sensors and use this
data to enhance your experience of interactivity with the game. They use AR
to give an immersive feel to the game, much like you are in the game’s world
and playing it in real life!&lt;/p&gt;</content><author><name>Shrvan Amlekar</name></author><category term="[&quot;Informative&quot;]" /><category term="Sensors" /><category term="Augmented Reality" /><summary type="html">How today's mobile games use the various sensors to provide the ultimate gaming experience!</summary></entry><entry><title type="html">Functioning of L293D motor driver</title><link href="https://grubdragon.github.io/erciitb/blog/tutorials/l293d/" rel="alternate" type="text/html" title="Functioning of L293D motor driver" /><published>2016-08-14T00:00:00+00:00</published><updated>2016-08-14T00:00:00+00:00</updated><id>https://grubdragon.github.io/erciitb/blog/tutorials/l293d</id><content type="html" xml:base="https://grubdragon.github.io/erciitb/blog/tutorials/l293d/">&lt;p&gt;Last year I entered IIT Bombay and had my first face off with the modern
tech then. We had a bot racing competition called XLR8 in which we have
to prepare a bot on our own and race it with others so as to win. Seems
easy? Not as much as it seems to be .&lt;/p&gt;

&lt;p&gt;It’s not just about making and winning, it’s about learning too . All
the components we are getting and assembling we should have knowledge
about them. How, when ,where they work and are used should be thing we
should really be taking care of .
So while we were making the bot we came across this most intriguing
small chip, &lt;strong&gt;L293D&lt;/strong&gt;. This is basically a motor driver, something which
helps in controlling motors (in our case, the wheels of the bot). A
first look at the connections and we feel it’s all too mixed up! Wires
entangled into one another and what goes where, NO IDEA!&lt;/p&gt;

&lt;p&gt;But actually it’s working is pretty easy. Here, I will try to explain it
in a simple way.&lt;/p&gt;

&lt;p&gt;So let’s explore this motor driver and see what we can do to learn it
(at least with a data sheet :P )&lt;/p&gt;

&lt;p&gt;Presuming we have this driver , its datasheet and zeal to learn.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://grubdragon.github.io/erciitb/assets/blog/l293d/image00.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It looks like this from outside and the connections inside are :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://grubdragon.github.io/erciitb/assets/blog/l293d/image01.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Working Of L293D&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;L293D is a motor driver 16 pin IC which can be used to run a set of two
DC motors at a time. To power itself it requires 5V voltage through VCC1
and can deliver up to 12 volts through VCC2.&lt;/p&gt;

&lt;p&gt;To understand the working of L293D, we first need to know about a
component called H-Bridge&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;H-Bridge&lt;/strong&gt;&lt;br /&gt;
A H-bridge looks like following :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://grubdragon.github.io/erciitb/assets/blog/l293d/image02.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It is used to apply voltage across a load( here, a motor ) in both the
directions. So we can easily infer from this if the voltage across the
motor is reversed , its direction of rotation is also reversed and hence
this is used to drive the motor in both the directions.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;If switches S1 and S4 are closed then motor rotates clockwise.&lt;/li&gt;
  &lt;li&gt;If switches S2 and S3 are closed then motor rotates anticlockwise.&lt;/li&gt;
  &lt;li&gt;If S1 and S3 or S2 and S4 are closed then motor stops rotating.&lt;/li&gt;
  &lt;li&gt;If all are left open motor moves freely.&lt;/li&gt;
  &lt;li&gt;Never close S1 and S2 or S3 and S4 or all of them simultaneously.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;L293D is, infact, a dual H bridge IC used to drive motors in both
forward and backward direction through various combinations of inputs
that we will look later. The first H-Bridge is formed by Left Hand Side
pins of L293D (see diagram) while the second is formed by the right hand
side ones.&lt;/p&gt;

&lt;p&gt;To ensure that motor attach to it at both sides run, PIN 1 and PIN 9 (
ENABLE PINS ) should be high. Enable pins can be a considered as a
switch to this IC , if it’s high then switch is on and motor will work (
according to the provided proper input ) and if it is low, meaning
switch is off, the motors won’t respond to the corresponding inputs.&lt;/p&gt;

&lt;p&gt;The voltage we supply at VCC1 is used to power the L293D for its working
and at VCC2 we get the output used for driving its motors. Now the
output at VCC2 depends on the voltage you supplied at VCC1. The fraction
of voltage you supply at VCC1 appears in the same fraction at VCC2.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CONNECTIONS IN L293D&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Pin1 and Pin9 are “Enable” pins or the switch pins as you can say.
They should be connected to +5V for the drivers to function (for
the motor to follow the inputs). If they pulled low (GND), then
the outputs will be turned off regardless of the input states,
stopping the motors.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Pin4, Pin5, Pin12 and Pin 13 are ground pins which should ideally be
connected to microcontroller’s ground.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Pin2, Pin7, Pin10 and Pin15 are logic input pins. These are control
pins which should be connected to microcontroller pins or whatever
is the input to L293D. Pin2 and Pin7 control the left motor ;
Pin10 and Pin15 control the right motor. (as shown in diagram)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Pin3, Pin6, Pin11, and Pin 14 are output pins. Tie Pin3 and Pin6 to
the left motor, Pin11 and Pin 14 to right motor. Note that there
is a bijection between the input pins and output pins.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Pin16 powers the IC and it should be connected to regulated +5Volts.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Pin8 powers the two motors and should be connected to positive lead
 of a secondary battery. As per the datasheet, supply voltage can
be as high as 36 Volts.&lt;/p&gt;

    &lt;p&gt;As we can see the highest output is 36V so considerably larger
motor can also be driven using this IC. ( Oh I see this IC is
useful :P )&lt;/p&gt;

    &lt;p&gt;Keep in mind all these connections while making your bot as well
the reason behind these connections. This makes debugging easy.
I have experienced this, we randomly did all the connections and
wondering why our bot isn’t working until some told enable pin is
set too low!&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;LOGIC TABLE FOR L293D&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://grubdragon.github.io/erciitb/assets/blog/l293d/image03.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Similarly for PIN 9 ( ~PIN 1 ) , PIN 10( ~PIN2 ) and PIN 15 ( ~PIN7 ).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;EXPLANATION OF THE TABLE&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now no need to memorize the high and low , work on the logic !&lt;br /&gt;
PIN 1 and PIN 9 are your enable pins so they need to be kept high and
otherwise it doesn’t matter what your input is , your motors will not
move.&lt;br /&gt;
Now we should have a potential difference between the output terminals,
so that it appears across motor and it rotates. For that to happen there
should be a potential difference at the input terminals too (since there
is a bijection between the input and output pins) ! Hence, the truth
table is justified.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DO’s AND DONT’s&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You have learnt about L293D but before moving on to any kind of
tinkering you should know what to experiment and what not to ( unless
you are so enthusiastic to see whats like a blown up L293D). Here we go:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Make sure you connect all the pins properly such that no two pins are
shorted except the ground pins.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Make sure the IC is connected in proper orientation. The pin to the
left of the small semicircle of the IC at the top is the first pin.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Make sure the supply voltage is not greater than 5 volts for IC and
more than 36 volts for motor.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Remove the input pins when not required to avoid any unnecessary
heating of IC.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Happy tinkering ! :D&lt;/p&gt;</content><author><name>Sanket Agrawal</name></author><category term="[&quot;Tutorials&quot;]" /><category term="XLR8" /><category term="L293D" /><category term="Motor Driver" /><summary type="html">How to implement H-bridge for motor control</summary></entry><entry><title type="html">Machine Learning</title><link href="https://grubdragon.github.io/erciitb/blog/machinel/" rel="alternate" type="text/html" title="Machine Learning" /><published>2016-08-11T00:00:00+00:00</published><updated>2016-08-11T00:00:00+00:00</updated><id>https://grubdragon.github.io/erciitb/blog/machinel</id><content type="html" xml:base="https://grubdragon.github.io/erciitb/blog/machinel/">&lt;p&gt;Wonder how Facebook identifies you and your friends in photos? Wonder how Gmail automatically detects and filters out spam? Or how Autosuggest in your smartphones works? All these answers lie in Machine Learning! Read ahead to find out! ;)&lt;/p&gt;

&lt;p&gt;Machine Learning is the science of getting computers to act without being explicitly programmed to do so. The machine is able to learn and implement algorithms, and tries to figure out/determine output.&lt;/p&gt;

&lt;p&gt;Gmail is able to classify mails into spam and not spam. How? It figures it out from content of the mail. “Mark as spam” helps in classification, as it takes these as input. Any ML Algorithm learns from data. Classifying handwritten numbers as digits is a common application of ML. As a very primal example, process of identifying numbers- see how many straight lines it has.&lt;/p&gt;

&lt;p&gt;ML is of two common types- Show four different red apples, give a red fruit and ask whether it’s an apple or not. You have a predefined set of data. This is known as Supervised Learning.&lt;/p&gt;

&lt;p&gt;Suppose we give the machine no output, but have data, it’s an example of unsupervised learning. In this case, the machine tries to categorise data into new groups, based on features of the images.&lt;/p&gt;

&lt;p&gt;Machine Learning can solve things that are solvable only. We cannot find cost of houses from number of potted plants in the house. Will give wrong results obviously.&lt;/p&gt;

&lt;p&gt;Gmail’s spam filter- part of it is supervised learning. Unsupervised learning- realises spam automatically. It’s a dynamic process. Way of filtering keeps changing along with changing ways of writing spam. Another example- Captcha. There’s an IP algorithm which is trying to learn if the captcha provided is correct. So, next time you see a captcha, remember, you are helping a Machine Learning Algorithm get better with your identification of the letters there. Basically, Captcha uses human confirmation to check if the letters/numbers the human provides is same as the output of the Machine Learning Algorithm that’s used to identify the letters in there!&lt;/p&gt;

&lt;p&gt;So, how does Machine Learning actually work? 
The first and most important thing we need to do is estimation of weights of the various parameters we have, on the basis of which the output is to be decided. Regression is concerned with modelling the relationship between variables that is iteratively refined using a measure of error in the predictions made by the model. Example of Linear Regression- Best fit line. Estimation of cost of house based on size of house. Line’s m and can be determined- these are the weights (Line is taken to be y=mx+c). Caution- Enough features are required to check. Error function is used to check the discrepancies in the data and output. Squared difference error is normally used to correct the hypothesis and find the weights. Regularisation is used in almost all algorithms. It is basically addition of a term to the error, sum of modulus of all parameters. It can choose any degree polynomial, it’s not restricted to a straight line.&lt;/p&gt;

&lt;p&gt;The most broad category- neural networks.
We are applying logic behind it, so we can’t treat it as a black box.&lt;/p&gt;

&lt;p&gt;Common problems solved using ML-
Classification problems- Classifying a new object into given groups.
Clustering Problem- It’s an example of unsupervised learning. Clustering is the assignment of a set of observations into subsets (called clusters) so that observations in the same cluster are similar in some sense.
Unsupervised learning will be mostly classification problems.&lt;/p&gt;

&lt;p&gt;Neural Networks are a tool used in ML. It’s an attempt to mimic the brain. Neurons work on electrical signals. If they get a signal more than threshold they fire, else remain grounded. Outputs of neurons are added up. Human neural system- one neuron firing gives signals to other nodes. Synapse- chemical triggering. Weights of inputs decides output of a neuron. Output is combination of weight vectors.
There is a constant bias term which decides the threshold. Network learns by itself and decides the threshold parameter. Weights are set into vectors, and learning happens by matrix multiplication.
Most often, neural networks are used in classification problems. Based on data, it develops the weights automatically. We just provide the structure. Layered networks of neurons. Each layer is a different function.
Parameters are not normally one dimensional, because we need to incorporate all the features together, plus there might be constraints in the parameters. Hence we need to use gradient descent. To know more about stochastic gradient descent, go to- https://en.wikipedia.org/wiki/Stochastic_gradient_descent&lt;/p&gt;

&lt;p&gt;Square error function- Sum of squares of errors. Minimise the square error function to minimise error. Stochastic Gradient Descent- Mean Error Function can be thought of as a paraboloid type curve, the decreasing gradient takes you towards the minima. It’s similar to the Newton Raphson Method. However, the square error function can be solved arithmetically only, not analytically.
Weights are updated by minimising errors. Back tracking or back propagation is done. Neural networks can approximate almost everything. No one actually knows the exact mechanisms of a neural network. We can’t get an intuition behind it.
Initially, weights are all set to one (you face some problems if the weights are initially set to zero).&lt;/p&gt;

&lt;p&gt;Genetic Algorithms are an application of Neural Networks.&lt;/p&gt;

&lt;p&gt;Courtesy (Speakers in the GD): Siddhant Garg, Karan Chadha, Arka Sadhu&lt;/p&gt;</content><author><name>Shobhna Misra</name></author><category term="blog" /><category term="Machine Learning" /><summary type="html">Wonder how Facebook identifies you and your friends in photos? Wonder how Gmail automatically detects and filters out spam? Or how Autosuggest in your smartphones works? All these answers lie in Machine Learning! Read ahead to find out! ;)</summary></entry><entry><title type="html">Making a Sound Meter in Python</title><link href="https://grubdragon.github.io/erciitb/blog/tutorials/sound-meter/" rel="alternate" type="text/html" title="Making a Sound Meter in Python" /><published>2016-08-04T00:00:00+00:00</published><updated>2016-08-04T00:00:00+00:00</updated><id>https://grubdragon.github.io/erciitb/blog/tutorials/sound-meter</id><content type="html" xml:base="https://grubdragon.github.io/erciitb/blog/tutorials/sound-meter/">&lt;p&gt;Those who have seen the 3 blocks of audience in PCSA compete during the STAB Orientation for the loudest cheer, know what this Sound Meter is.&lt;/p&gt;

&lt;h2 id=&quot;target&quot;&gt;Target&lt;/h2&gt;

&lt;p&gt;To analyse any incoming sound(be it mic or laptop microphone) and find its maximum volume. Actually, using other detailed operations you can estimate the frequency etc. Basically, once we read the audio input stream we can use the desired computations on it.&lt;/p&gt;

&lt;h2 id=&quot;plan-of-action&quot;&gt;Plan of action&lt;/h2&gt;

&lt;p&gt;This is roughly what we need to do:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Read the input from the laptop microphone or the mic(in our case, that requires setting it to default recording device)&lt;/li&gt;
  &lt;li&gt;Find the maximum value of the sound channels over a chunk of inputs.&lt;/li&gt;
  &lt;li&gt;Display it!&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;libraries-used&quot;&gt;Libraries used:&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;pyaudio&lt;/strong&gt; for audio stream input.
&lt;strong&gt;audioop&lt;/strong&gt; for max value analysis.
&lt;strong&gt;pygame&lt;/strong&gt; for display.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;audioop&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pygame&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pyaudio&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;wave&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#Initialisation for PyAudio&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;CHUNK&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;FORMAT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pyaudio&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;paInt16&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;CHANNELS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;RATE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;44100&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;RECORD_SECONDS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#Object&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pyaudio&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PyAudio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FORMAT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;channels&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CHANNELS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RATE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;frames_per_buffer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CHUNK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#PyGame initialisations and basic objects&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pygame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;screensize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;900&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;600&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;screen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pygame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;screensize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pygame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_caption&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Shout harder.. :D&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#Defining colors&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;WHITE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;RED&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;128&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;128&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;YELLOW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;128&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;BLUE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#Loop till close button clicked&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;clock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pygame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Clock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#variables&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;score&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.8&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;margin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;samples_per_section&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;screensize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;margin&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;sound_tracks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;samples_per_section&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;max_value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;current_section&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;

	&lt;span class=&quot;c&quot;&gt;#Limits CPU usage to max 10 times per second&lt;/span&gt;
	&lt;span class=&quot;c&quot;&gt;#Not required here because already the for loop takes averages over some time&lt;/span&gt;
	&lt;span class=&quot;c&quot;&gt;#clock.tick(10)&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;total&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
	&lt;span class=&quot;c&quot;&gt;#Now we read data from device for around one second&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;#l,data = inp.read()&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CHUNK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;c&quot;&gt;#oreo_sound.append(data)&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;reading&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;audioop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;total&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;total&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reading&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;0001&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

	&lt;span class=&quot;c&quot;&gt;#any scaling factor&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;total&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;total&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;sound_tracks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_section&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sound_tracks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_section&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;total&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;max_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_section&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_section&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;total&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;screen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WHITE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;# draw highlighted section&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;pygame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;draw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;screen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;YELLOW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;screensize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_section&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;screensize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;screensize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;sectionx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;screensize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;margin&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;#add meet wala last year ka feature&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;pygame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;draw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;screen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sectionx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;screensize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;screensize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;screensize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sectionx&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;screensize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sound_tracks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;pygame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;draw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;screen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BLUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sound_tracks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;

	&lt;span class=&quot;c&quot;&gt;#frame flip must happen after all drawing commands&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;pygame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

	&lt;span class=&quot;c&quot;&gt;#Set close button event&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pygame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pygame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;QUIT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pygame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MOUSEBUTTONUP&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                    &lt;span class=&quot;c&quot;&gt;# right button pressed, clear all arrays&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;sound_tracks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;samples_per_section&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;max_value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;current_section&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pygame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mouse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;current_section&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;screensize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_section&lt;/span&gt;
	
&lt;span class=&quot;c&quot;&gt;#clearing the resources&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pygame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;quit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stop_stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;terminate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pygame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;quit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Have fun!&lt;/p&gt;</content><author><name>Krish Mehta</name></author><category term="[&quot;Tutorials&quot;]" /><category term="python" /><category term="audio" /><summary type="html">A basic usage of audio handling libraries for creating a fun sound-meter!</summary></entry><entry><title type="html">Sudoku Solver</title><link href="https://grubdragon.github.io/erciitb/blog/projects/sudoku-solver/" rel="alternate" type="text/html" title="Sudoku Solver" /><published>2016-07-31T00:00:00+00:00</published><updated>2016-07-31T00:00:00+00:00</updated><id>https://grubdragon.github.io/erciitb/blog/projects/sudoku-solver</id><content type="html" xml:base="https://grubdragon.github.io/erciitb/blog/projects/sudoku-solver/">&lt;p&gt;&lt;strong&gt;Sudoku Solver&lt;/strong&gt; is the collection of very basic image processing techniques. A very good way to start is the OpenCV library which can be compiled on almost all the platforms. &lt;strong&gt;OpenCV&lt;/strong&gt;(open source computer vision )is a library of programming functions mainly aimed at real time computer vision. Through this project ,my main motivation was to explore what OpenCV offers in a little bit detail . There are already many blogs dealing with how to recognise a whole sudoku puzzle but it  was nevertheless  a pleasant experience doing it on my own and writing this blog ( It is pretty obvious that I too would have been lost without all those online resources , blogs , and documentations.)&lt;/p&gt;

&lt;h3 id=&quot;what-actually-this-project-does&quot;&gt;What actually this project does?&lt;/h3&gt;

&lt;p&gt;It takes an input image of a sudoku and processes the image and identifies the all the whole suduko and return the answer of the sudoku.
It involves two major challenges:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Image recognition&lt;/li&gt;
  &lt;li&gt;Solving the sudoku puzzle&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I was more interested in the image processing part as there are fixed algorithm for solving  the sudoku puzzle so my main focus in this blog would be the image processing part.&lt;/p&gt;

&lt;h3 id=&quot;the-major-steps-this-will-involve-are&quot;&gt;&lt;strong&gt;The major steps this will involve are:&lt;/strong&gt;&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt; Reading an image&lt;/li&gt;
  &lt;li&gt; Preprocessing the image ( removal of noises and thresholding the image)&lt;/li&gt;
  &lt;li&gt; Finding the sudoku square out of the whole image&lt;/li&gt;
  &lt;li&gt; Extracting the sub-grids of the sudoku.&lt;/li&gt;
  &lt;li&gt;Recognising the digits (OCR)&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;we-also-need-to-make-a-few-assumptions-&quot;&gt;&lt;strong&gt;We also need to make a few assumptions :&lt;/strong&gt;&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;In the image , the largest square would be that of the sudoku image&lt;/li&gt;
  &lt;li&gt;The puzzle would be oriented reasonably oriented.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;So let’s get started, &lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;First of all we need is an input image.  We need to load a sudoku image .&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://grubdragon.github.io/erciitb/assets/blog/sudoku-solver/image1.jpg&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;     &lt;span class=&quot;n&quot;&gt;Mat&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;imread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sudoku.jpg&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CV_LOAD_IMAGE_UNCHANGED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;After loading the image ,the first thing to do in any image processing problem is to reduce the amount of data you are dealing with.We started with a full colour high resolution image.The first thing we can do is to convert the image into a gray scale as looking at our sample image having colour is of no use to us.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;     &lt;span class=&quot;n&quot;&gt;Mat&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;srcb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;cvtColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;srcb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;COLOR_BGR2GRAY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;image-processing&quot;&gt;Image Processing:&lt;/h3&gt;

&lt;p&gt;After we have converted the image into a gray scale image we need to remove the noises from the image and smoothen the image as without smoothing the image we deal with extra objects which are not needed so it is necessary to remove the noises. There are many functions available in the OpenCV library for blurring the image like blur , GaussianBlur , MedianBlur . I tried them all and the best result I got out of them was with gaussian blur so I used it . Next , what we need to do is to remove other extra information . We are going to threshold the image that is we have either the foreground pixel or the background pixel. There are variety of thresholding techniques available to us in OpenCV library. My personal favourite is a simple adaptive threshold .For each pixel in the image it takes the average value of the surrounding area.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;    &lt;span class=&quot;n&quot;&gt;Mat&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;smooth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Mat&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thresholded&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;GaussianBlur&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;srcb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;smooth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//removing noises
&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;adaptiveThreshold&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;smooth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thresholded&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ADAPTIVE_THRESH_MEAN_C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;THRESH_BINARY_INV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt; I  have done just noise removal and adaptive thresholding and  it is working so haven’t done anything extra. Below is the result:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://grubdragon.github.io/erciitb/assets/blog/sudoku-solver/image2.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;extracting-the-sudoku-&quot;&gt;Extracting the Sudoku :&lt;/h3&gt;

&lt;p&gt;Now after thresholding we need to find out the sudoku square , for this we made an assumption the main thing in our image would be the sudoku so we need to find the square with the largest area and it would be our sudoku.&lt;/p&gt;

&lt;p&gt;So one thing is very important the sudoku square should be largest otherwise our method fails.&lt;/p&gt;

&lt;p&gt;We start by finding the countours in our thresholded image.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;     &lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contours&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
     &lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;heirarchy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;findContours&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;thresholded2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contours&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;heirarchy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CV_RETR_TREE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CV_CHAIN_APPROX_SIMPLE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now we find the blob with maximum area .First we filter them by area . We consider the blob for the next processing only if its area is greater than a particular value (here , it is 50) . Next , we find out the area of each blob and hence extract the blob which has the maximum area.  &lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;    &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;area&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxarea&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contours&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;area&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contourArea&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contours&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;area&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;area&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxarea&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;maxarea&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;area&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now after finding the blob with maximum area we approximate the countour into a polygon. It removes the unwanted coordiante values in the countour and keeps only the corners.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;    &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;perimeter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arcLength&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contours&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;approxPolyDP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contours&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contours&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;01&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;perimeter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now we draw the contour on our image just to check it.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;    &lt;span class=&quot;n&quot;&gt;drawContours&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contours&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Scalar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&quot;https://grubdragon.github.io/erciitb/assets/blog/sudoku-solver/image3.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now we have found out the boundary of the sudoku and next we need to to do is extract this much part and then work on it.&lt;/p&gt;

&lt;p&gt;As we have approximated the contours into a square or rectangle we will get only four coordinate that are the corners and now what we need to do is find out which coordinate is of the top-left corner , top-right corner , bottom-left corner , bottom-right corner. As the order of contours in all the image will not be fixed we need to find it out as we have to map the top-left to [0,0] for new image and bottom-right to [449,449]  , as we are creating an image of [450,450] you can do it of whichever size you want , therefore we need to identify the correct order of corners otherwise we will get rotated images. The logic I choose to find the respective corners was : First take the sum of x , y coordinates TOP -LEFT has least sum and BOTTOM-RIGHT has the maximum sum. Now the difference  i.e y-x TOP-RIGHT has minimum and BOTTOM-LEFT has maximum sum.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;    &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
    &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prevsum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
    &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;diff1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
    &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;diff2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;diffprev2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
    &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;diffprev&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prevsum2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contours&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contours&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

     &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contours&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contours&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;diff1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contours&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contours&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;diff2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contours&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contours&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;diff1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;diffprev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;diffprev&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;diff1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;diff2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;diffprev2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;diffprev2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;diff2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prevsum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;prevsum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prevsum2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;prevsum2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now we have 4 points in order and now we need corresponding points where they should be mapped.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;     &lt;span class=&quot;n&quot;&gt;Point2f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;Point2f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contours&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contours&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contours&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contours&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Point2f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;450&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;450&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Point2f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Point2f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;450&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Point2f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;450&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now we have the input and output array both what we need to do is apply prespective transformation to get the sudoku part required. Prespective transformation maps a point given by x, y in one quadilateral to a new point X ,Y in another quadilateral.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;     &lt;span class=&quot;n&quot;&gt;Mat&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Mat&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;mat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Mat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zeros&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;wrap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getPerspectiveTransform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;warpPerspective&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;450&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;450&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;the-result-we-get-is&quot;&gt;The result we get is:&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://grubdragon.github.io/erciitb/assets/blog/sudoku-solver/image4.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now apply the pre-processing as we did earlier and get the thresholded image and now we need to extract each grids centre the digit and then finally apply OCR.
So, we can extract each grids as we know our image is a matrix of 450&lt;em&gt;450 and therefore our every sub grids will be a matrix of 50&lt;/em&gt;50 so we can extract each grid by extracting the sub grids of 50*50 and store all the images in a vector.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;     &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;450&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;450&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
             &lt;span class=&quot;n&quot;&gt;smallimage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Mat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;thresholded31&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Rect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
             &lt;span class=&quot;n&quot;&gt;smallt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push_back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;smallimage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
           &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now we have each small grid and it may contain digits or not so we will set a threshold pixel if the image contains pixels greater than that then it may contain a digit otherwise it doesnot and now the images with pixels greater than threshold you need to extract the digit and center it rather than testing the image directly as it will increase the changes of correct recogniton. We can extract the digit and centre it in same way as we extracted the main grid , find the  contour  and bound it by rectangle and find the bounding rectangle with greatest area then resize it.(Assumption : the subgrids containing digits will have the digits as the main part).&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;      &lt;span class=&quot;n&quot;&gt;thresholded32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;smallt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contours2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;findContours&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;thresholded32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contours2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CV_RETR_LIST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CV_CHAIN_APPROX_SIMPLE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Rect&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prevb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;areaprev&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;area2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contours2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
             &lt;span class=&quot;n&quot;&gt;Rect&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bnd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;boundingRect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contours2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
             &lt;span class=&quot;n&quot;&gt;area2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bnd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bnd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
               &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;area2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;areaprev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
              &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                       &lt;span class=&quot;n&quot;&gt;prevb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bnd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                       &lt;span class=&quot;n&quot;&gt;areaprev&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;area2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                       &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
               &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
           &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Rect&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prevb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;regionOfInterest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;smallt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;resize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;regionOfInterest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;img12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;INTER_NEAREST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;the-results-is-as-follows&quot;&gt;The results is as follows:&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://grubdragon.github.io/erciitb/assets/blog/sudoku-solver/image5.png&quot; alt=&quot;image&quot; /&gt;
&lt;img src=&quot;https://grubdragon.github.io/erciitb/assets/blog/sudoku-solver/image6.png&quot; alt=&quot;image&quot; /&gt;
&lt;img src=&quot;https://grubdragon.github.io/erciitb/assets/blog/sudoku-solver/image7.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now we have all the digits centered what we now need to do is apply OCR . There are huge number of techniques for implementing OCR and huge number of pattern recognition algorithm and for my implementation i choose K-Nearest Neighbour algorithm as it is already available in OpenCV library.The algorithm caches all training samples and predicts responses for new sample by analyzing a certain number of the nearest neighbour of the sample using voting and calculated mean. For it you need to create sample data and train those images and recognise digits from previously trained data. I created training samples by collecting images from various sudoku .My training data can be found out on this &lt;a href=&quot;https://drive.google.com/open?id=0ByDK_y_Ss5KbSFJkU19fSG15QXc&quot;&gt;link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This is the code for training the data :&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;      &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;797&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Mat&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trainData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Mat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CV_32FC1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Mat&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;responces&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Mat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CV_32FC1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// reading the images from the folder of tarining sample
&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;DIR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dirent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pathToImages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;./digits3&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// name of the folder containing images;
&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;%s/%d&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pathToImages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opendir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;readdir&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strcmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strcmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;..&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
              &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
              &lt;span class=&quot;n&quot;&gt;sprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/%s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
              &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;digit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
              &lt;span class=&quot;n&quot;&gt;digit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;digit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
              &lt;span class=&quot;n&quot;&gt;Mat&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;imread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;digit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//loading the image
&lt;/span&gt;
              &lt;span class=&quot;n&quot;&gt;cvtColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CV_BGR2GRAY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;//converting into grayscale
&lt;/span&gt;
              &lt;span class=&quot;n&quot;&gt;threshold&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mat&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mat&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;THRESH_OTSU&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// preprocessing
&lt;/span&gt;
              &lt;span class=&quot;n&quot;&gt;mat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;convertTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CV_32FC1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;255.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//necessary to convert images to CV_32FC1 for using K nearest neighbour algorithm.
&lt;/span&gt;
              &lt;span class=&quot;n&quot;&gt;resize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;INTER_NEAREST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// same size as our testing samples
&lt;/span&gt;
              &lt;span class=&quot;n&quot;&gt;mat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reshape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
              &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
              &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
               &lt;span class=&quot;n&quot;&gt;trainData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;at&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;at&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// storing the pixels of the image
&lt;/span&gt;
              &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
              &lt;span class=&quot;n&quot;&gt;responces&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// stroing the responce corresponding to image
&lt;/span&gt;
              &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
             &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;closedir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;KNearest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;knearest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;trainData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;responces&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;knearest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;train&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;trainData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;responces&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This trains the data and to recognise the number we use the find_nearest of the KNearest class in OpenCV library.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;     &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;img123&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;at&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;img12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;at&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// storing the pixels value of testing sample into a new mat for testing
&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
     &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;knearest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find_nearest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;img123&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reshape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The accuracy of this method is upto 90% . So to increase the accuracy you may increase number of the training samples but it may not give very good results ,so to improve the accuracy try out other algorithms available which are more accurate.&lt;/p&gt;

&lt;p&gt;Although,I did not get 100% correct results but anyways it was overall a great learning experience.&lt;/p&gt;

&lt;p&gt;The whole source code can be found &lt;a href=&quot;https://drive.google.com/open?id=0ByDK_y_Ss5KbS2xtQ0pEOGxkV1E&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;</content><author><name>Anant Jain</name></author><category term="[&quot;Projects&quot;]" /><category term="Algorithm" /><category term="OpenCV" /><summary type="html">OpenCV project for reading and solving Sudokus</summary></entry><entry><title type="html">Switched Mode Power Supply Technology</title><link href="https://grubdragon.github.io/erciitb/blog/projects/smps/" rel="alternate" type="text/html" title="Switched Mode Power Supply Technology" /><published>2016-07-31T00:00:00+00:00</published><updated>2016-07-31T00:00:00+00:00</updated><id>https://grubdragon.github.io/erciitb/blog/projects/smps</id><content type="html" xml:base="https://grubdragon.github.io/erciitb/blog/projects/smps/">&lt;p&gt;Switched Mode Power Supply or SMPS is an electronic power supply that incorporates a switching regulator to convert electrical power efficiently. Like other power supplies, an SMPS transfers power from a source, like mains power, to a load, such as a PC, while converting voltage and current characteristics. A typical SMPS is seen down here :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://grubdragon.github.io/erciitb/assets/blog/smps/image1.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;circuit-diagram&quot;&gt;Circuit Diagram&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://grubdragon.github.io/erciitb/assets/blog/smps/image_2.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The components F1 and F2 are referred to as Fuse.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-components-of-smps&quot;&gt;The components of SMPS&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;EMI Filter :&lt;/strong&gt; The low-pass EMI filter is designed to reduce to an acceptable level high frequency currents getting back into the AC line. This is necessary to prevent interference on the other devices connected to the same electrical wiring. This is to comply some of the safety regulations.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rectifier Bridge :&lt;/strong&gt; It converts bipolar waveforms into unipolar pulsating ones. It has four diodes in a bridge arrangement to provide the same polarity of the output for both polarities of the input.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PFC Regulator :&lt;/strong&gt; The Power Factor (PF) of rectified input voltage is increased in this part of the circuit. The ratio of the actual electrical power dissipated by an AC circuit to the product of the r.m.s. values of current and voltage is called Power Factor.. The difference between the two is caused by reactance in the circuit and represents power that does no useful work.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DC-DC Converter :&lt;/strong&gt; It is used to generate DC outputs from the PFC outputs.&lt;/p&gt;

&lt;h3 id=&quot;specifications-to-know-before-choosing-smps&quot;&gt;Specifications to know before choosing SMPS&lt;/h3&gt;

&lt;p&gt;Different SMPSs have different power ratings, different voltage outputs and thus different current ratings. It is thus important to decide upon these factors before choosing the SMPS of your choices.&lt;/p&gt;

&lt;h2 id=&quot;real-life-applications&quot;&gt;Real life applications&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Some of the places where SMPS can be found are as follows:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When we use an adapter-looking thing to power Arduino, it converts 220V supply to a 12V supply required to power the Arduino. This is achieved by the SMPS present inside the black part of the adapter.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://grubdragon.github.io/erciitb/assets/blog/smps/image_3.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The black box looking thing attached to a laptop charger is actually an SMPS to convert the input to an output DC Voltage to charge the battery.&lt;/p&gt;

&lt;h3 id=&quot;how-to-use-it-with-arduino&quot;&gt;How to use it with Arduino&lt;/h3&gt;

&lt;p&gt;Suppose we need to power a device which works at a higher voltage and power supply than an arduino can provide, we can use an SMPS to power the circuit. But if we want to control the turning on and off of the device using arduino we might face a problem in this case. In this case a relay will work the best as relay can be used to control a higher rated circuit using Arduino’s lower rated circuit.&lt;/p&gt;</content><author><name>Dhrumil Shah</name></author><category term="[&quot;Projects&quot;]" /><category term="Rectifier" /><category term="Power Electronics" /><summary type="html">Learn about the technology present in chargers!</summary></entry></feed>
